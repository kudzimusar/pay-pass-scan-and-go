Thank you for the feedback. You are absolutely right; a project of this ambition requires a prompt that leaves no room for assumption. I will synthesize all of our discussions—the initial vision, the detailed wireframes, the technical specifications, and the user journeys—into a single, unified, and comprehensive document. The following prompt is designed to be a definitive, all-encompassing instruction set for an AI app builder, ensuring every element of the **PayPass Scan and Go** platform is built precisely to your specifications.

-----

\`\`\`
# **Definitive Build Prompt: PayPass Scan and Go Platform**

## **1. Overall Objective**
Your task is to build a complete, production-ready, and highly scalable digital payments platform named **PayPass Scan and Go**. This project is a mobile-first, cloud-native digital wallet for the Zimbabwean market. You are explicitly instructed to use **React.js** for the web dashboards and **Node.js** for the backend microservices. You must adhere to every detail in this document, which serves as the final and complete blueprint. No element is to be assumed or modified without explicit instruction.

## **2. Project Blueprint**

### **2.1. Concept Overview**
PayPass is designed to replace cash and physical cards by leveraging a frictionless QR code payment system. It is deeply integrated with existing mobile money providers and international remittance services, offering a seamless, dual-currency (USD/ZWL) experience that operates effectively even in low-connectivity environments.

### **2.2. Core User Journeys**
#### **For Commuters:**
* **Onboarding:** The user downloads the app, registers with their mobile number, and verifies via OTP. They are guided to optionally set up biometric authentication (fingerprint/FaceID) or a PIN.
* **Funding Wallet:** The user navigates to the "Top Up" screen and selects their preferred method: mobile money (**EcoCash, TeleCash**), international remittance (**Mukuru**), or a cash deposit at a partner agent.
* **Paying for a Ride:** The user taps "Tap to Pay," which instantly launches the QR scanner. They scan the bus's QR code. The app automatically confirms the fare, and the user authenticates with their PIN or biometrics. A "Payment Successful" screen with a detailed receipt is displayed immediately.
* **Account Recovery:** If a phone is lost or stolen, the user must be able to securely recover their funds and account using SIM re-issue, security questions, and/or biometrics—without needing a public password.

#### **For Bus Owners/Operators:**
* **Onboarding:** The operator registers through the web dashboard, providing necessary KYC documentation.
* **QR Code Management:** The operator can securely generate and manage unique, static QR codes for each bus or route directly from their dashboard.
* **Revenue Monitoring:** The operator's dashboard provides a real-time, consolidated view of all payments received, with filters for date, bus, and currency.
* **Fraud Protection:** The system is designed to prevent conductors or unauthorized personnel from accessing the revenue. All funds are routed directly to the registered owner's account.

## **3. Technical Specifications**

### **3.1. Architecture**
The entire platform will be built as a cloud-native microservices architecture on **Kubernetes** or **AWS ECS**. The following services must be implemented as separate, self-contained units:
* Payments
* User/Account Management
* Notifications
* APIs
* Promotions
* Analytics

### **3.2. Technology Stack**
* **Mobile Apps:** Native applications for **Android (Kotlin)** and **iOS (Swift)**.
* **Web Dashboards:** A responsive, cross-platform dashboard built with **React.js**.
* **Backend:** All microservices must be built using **Node.js** (frameworks like Express.js or NestJS are acceptable).
* **Database:**
    * **Transactional Data:** A distributed SQL database (**TiDB or CockroachDB**) is mandatory for high-volume, real-time transaction processing.
    * **Caching:** **Redis** for in-memory caching.
    * **Logs/History:** **Elasticsearch** for searchable transaction history and audit trails.

### **3.3. Payments Microservice (Detailed Specification)**
This is the most critical microservice. It must be architected with the following principles:
* **Transactional Integrity:** All payment flows must be managed using the **SAGA Pattern** to ensure data consistency across multiple services. If a debit or credit fails, a compensating transaction must be triggered automatically.
* **API Layer:** Secure REST/GraphQL endpoints using OAuth2/JWT for authentication. Implement strict input validation and rate limiting. Key endpoints include `/payments/ride`, `/payments/utility`, `/payments/send`, and `/payments/topup`.
* **Wallet Engine:** A high-concurrency wallet engine that maintains USD/ZWL balances separately and utilizes idempotency keys to prevent double-spending.
* **Integrations:** Connectors for **EcoCash, TeleCash, Mukuru, WorldRemit**, and other local gateways must be implemented with robust retry logic.

## **4. App & Site Map**

### **4.1. Mobile App Structure**
* **Home Dashboard:** Total balance (USD/ZWL switch), "Tap to Pay" button, quick top-up buttons, last 3 transactions preview.
* **Top Up:** Options for mobile money, remittance, and cash agents.
* **Payment History:** Tabs for "Bus Rides," "Shops," "Utilities," and "Received" with a detailed list and filters.
* **Pay Bills:** A simple grid for electricity, water, and airtime top-ups.
* **Friends & Family:** Screens to send/request money and split fares.
* **Settings:** Account, Security (PIN/biometrics), Help & Support.

### **4.2. Operator Web Dashboard Structure**
* **Dashboard:** Real-time revenue, active buses, and payment history.
* **QR Code Management:** A module to generate and manage QR codes for each bus.
* **Reporting:** Functionality to export detailed payment logs.

## **5. Non-Functional Requirements & Key Innovations**
### **Non-Functional Requirements:**
* **Uptime:** The platform must be engineered for **99.9%+ availability**.
* **Scalability:** The architecture must be capable of scaling to support **10M+ daily transactions**.
* **Performance:** Average transaction processing time must be under **2 seconds**.
* **Resilience:** The app must have a low-data/offline mode with a **USSD fallback**.
* **Security:** Adherence to **PCI-DSS-level security** and a built-in, real-time **Fraud Detection System**.

### **Key Innovations:**
* **QR-Only Design:** No physical cards.
* **Native Dual-Currency Support:** Seamless handling of USD and ZWL.
* **Diaspora-Friendly:** Direct top-up and fare payment from abroad.

## **6. Final Instruction**
Your task is to now proceed with this comprehensive and final blueprint. After a thorough review, you will confirm your understanding of every element. Your first deliverable will be a detailed architectural diagram of the microservices, a complete API schema, and an initial development timeline broken down by sprint.
\`\`\`
