# Redis Cluster Configuration for PayPass
# High-availability distributed caching setup
# Redis Clustering: Enabled

# =============================================================================
# CLUSTER CONFIGURATION
# =============================================================================

# Enable cluster mode
cluster-enabled yes

# Cluster configuration file (auto-generated)
cluster-config-file nodes.conf

# Node timeout in milliseconds
cluster-node-timeout 15000

# Minimum number of master nodes required for cluster operation
cluster-require-full-coverage no

# Cluster migration barrier
cluster-migration-barrier 1

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================

# Bind to all interfaces (configure firewall appropriately in production)
bind 0.0.0.0

# Default Redis port (adjust per node)
port 7000

# Cluster bus port (port + 10000)
# cluster-port 17000

# TCP keepalive
tcp-keepalive 300

# TCP backlog
tcp-backlog 511

# =============================================================================
# MEMORY CONFIGURATION
# =============================================================================

# Maximum memory usage (adjust based on available RAM)
maxmemory 2gb

# Memory eviction policy for cache behavior
maxmemory-policy allkeys-lru

# Memory sampling for LRU
maxmemory-samples 5

# =============================================================================
# PERSISTENCE CONFIGURATION
# =============================================================================

# RDB snapshots
save 900 1      # Save if at least 1 key changed in 900 seconds
save 300 10     # Save if at least 10 keys changed in 300 seconds  
save 60 10000   # Save if at least 10000 keys changed in 60 seconds

# RDB file compression
rdbcompression yes

# RDB file checksum
rdbchecksum yes

# RDB filename
dbfilename dump.rdb

# Working directory
dir /var/lib/redis/

# AOF persistence (for durability)
appendonly yes
appendfilename "appendonly.aof"

# AOF sync frequency
appendfsync everysec

# AOF rewrite configuration
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log level
loglevel notice

# Log file
logfile /var/log/redis/redis-server.log

# Syslog
# syslog-enabled yes
# syslog-ident redis

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Authentication (set strong password in production)
# requirepass your-strong-redis-password

# Rename dangerous commands
rename-command FLUSHDB ""
rename-command FLUSHALL ""
rename-command KEYS ""
rename-command CONFIG "CONFIG_a8f5f17b9e8f4d5c"

# Protected mode
protected-mode yes

# =============================================================================
# CLIENT CONFIGURATION
# =============================================================================

# Max number of connected clients
maxclients 10000

# Client timeout (0 = disabled)
timeout 0

# =============================================================================
# SLOW LOG CONFIGURATION
# =============================================================================

# Slow log threshold (microseconds)
slowlog-log-slower-than 10000

# Slow log max entries
slowlog-max-len 128

# =============================================================================
# LATENCY MONITORING
# =============================================================================

# Latency threshold for monitoring (milliseconds)
latency-monitor-threshold 100

# =============================================================================
# MEMORY OPTIMIZATION
# =============================================================================

# Hash max ziplist entries/value
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# List max ziplist size/compress depth
list-max-ziplist-size -2
list-compress-depth 0

# Set max intset entries
set-max-intset-entries 512

# Sorted set max ziplist entries/value
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation
hll-sparse-max-bytes 3000

# =============================================================================
# NOTIFICATION CONFIGURATION
# =============================================================================

# Keyspace notifications (enable for monitoring)
notify-keyspace-events "Ex"

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================

# Hash function for consistent hashing
# hash-max-ziplist-entries 512

# Compression settings
# rdb-compression yes
# aof-use-rdb-preamble yes

# Memory usage reporting
# memory-usage-threshold 80

# =============================================================================
# CLUSTER-SPECIFIC SETTINGS
# =============================================================================

# Cluster announce settings (for Docker/NAT environments)
# cluster-announce-ip 10.1.1.5
# cluster-announce-port 7000
# cluster-announce-bus-port 17000

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# IO threads (Redis 6.0+)
# io-threads 4
# io-threads-do-reads yes

# Disable transparent huge pages warning
# disable-thp yes

# =============================================================================
# MONITORING HOOKS
# =============================================================================

# Client output buffer limits
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# =============================================================================
# REPLICATION SETTINGS
# =============================================================================

# Replica settings
# replica-serve-stale-data yes
# replica-read-only yes
# repl-diskless-sync no
# repl-diskless-sync-delay 5

# =============================================================================
# SAMPLE CLUSTER NODES CONFIGURATION
# =============================================================================

# Node 1: redis-cluster-node-1:7000
# Node 2: redis-cluster-node-2:7001  
# Node 3: redis-cluster-node-3:7002
# Node 4: redis-cluster-node-4:7003 (replica)
# Node 5: redis-cluster-node-5:7004 (replica)
# Node 6: redis-cluster-node-6:7005 (replica)

# Cluster creation command:
# redis-cli --cluster create \
#   redis-cluster-node-1:7000 \
#   redis-cluster-node-2:7001 \
#   redis-cluster-node-3:7002 \
#   redis-cluster-node-4:7003 \
#   redis-cluster-node-5:7004 \
#   redis-cluster-node-6:7005 \
#   --cluster-replicas 1

# =============================================================================
# HEALTH CHECK CONFIGURATION
# =============================================================================

# Health check script should verify:
# 1. Cluster health: redis-cli cluster info
# 2. Node status: redis-cli cluster nodes
# 3. Memory usage: redis-cli info memory
# 4. Replication lag: redis-cli info replication
# 5. Slow queries: redis-cli slowlog get

# =============================================================================
# BACKUP CONFIGURATION
# =============================================================================

# Backup strategy:
# 1. Daily RDB snapshots
# 2. AOF file rotation
# 3. Cross-region replication
# 4. Point-in-time recovery capability

# =============================================================================
# MONITORING METRICS
# =============================================================================

# Key metrics to monitor:
# - cluster_state
# - cluster_slots_assigned
# - cluster_known_nodes
# - cluster_size
# - keyspace_hits_ratio
# - memory_usage_percentage
# - connected_clients
# - commands_processed_per_sec
# - network_io_per_sec

# =============================================================================
# DISASTER RECOVERY
# =============================================================================

# Recovery procedures:
# 1. Node failure: Automatic failover via cluster
# 2. Split brain: Manual intervention with cluster reset
# 3. Data corruption: Restore from backup
# 4. Network partition: Wait for partition heal
# 5. Complete cluster loss: Restore from last backup

# =============================================================================
# DOCKER COMPOSE INTEGRATION
# =============================================================================

# Example docker-compose service:
# redis-cluster-node-1:
#   image: redis:7-alpine
#   command: redis-server /usr/local/etc/redis/redis.conf
#   volumes:
#     - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
#     - redis-node-1-data:/var/lib/redis
#   ports:
#     - "7000:7000"
#     - "17000:17000"
#   networks:
#     - redis-cluster-network
