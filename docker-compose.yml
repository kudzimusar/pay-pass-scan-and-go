version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./services/api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - PAYMENT_SERVICE_URL=http://payment-service:3002
      - WALLET_SERVICE_URL=http://wallet-service:3003
      - COMPLIANCE_SERVICE_URL=http://compliance-service:3004
      - AI_FRAUD_SERVICE_URL=http://ai-fraud-detection:3005
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - user-service
      - payment-service
      - wallet-service
      - compliance-service
      - ai-fraud-detection
    restart: unless-stopped
    deploy:
      replicas: 2
    networks:
      - paypass-network

  # User Service
  user-service:
    build: ./services/user-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    deploy:
      replicas: 2
    networks:
      - paypass-network

  # Payment Service
  payment-service:
    build: ./services/payment-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - WALLET_SERVICE_URL=http://wallet-service:3003
      - COMPLIANCE_SERVICE_URL=http://compliance-service:3004
    depends_on:
      - redis
      - postgres
      - wallet-service
      - compliance-service
    restart: unless-stopped
    deploy:
      replicas: 2
    networks:
      - paypass-network

  # Wallet Service
  wallet-service:
    build: ./services/wallet-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    deploy:
      replicas: 2
    networks:
      - paypass-network

  # Compliance Service
  compliance-service:
    build: ./services/compliance-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - KYC_PROVIDER_API_KEY=${KYC_PROVIDER_API_KEY}
      - AML_PROVIDER_API_KEY=${AML_PROVIDER_API_KEY}
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    deploy:
      replicas: 2
    networks:
      - paypass-network

  # AI Fraud Detection Service
  ai-fraud-detection:
    build: ./services/ai-fraud-detection
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    deploy:
      replicas: 2
    volumes:
      - ml-models:/app/models
    networks:
      - paypass-network

  # Analytics Service
  analytics-service:
    build: ./services/analytics-service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - CLICKHOUSE_URL=${CLICKHOUSE_URL}
    depends_on:
      - redis
      - postgres
      - clickhouse
    restart: unless-stopped
    deploy:
      replicas: 2
    networks:
      - paypass-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - paypass-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=paypass
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/sql:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - paypass-network

  # ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    restart: unless-stopped
    networks:
      - paypass-network

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - paypass-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - paypass-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - paypass-network

volumes:
  redis-data:
  postgres-data:
  clickhouse-data:
  prometheus-data:
  grafana-data:
  ml-models:

networks:
  paypass-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
